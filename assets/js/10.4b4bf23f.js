(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{182:function(t,e,a){"use strict";a.r(e);var s=a(0),n=Object(s.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),a("hr"),t._v(" "),t._m(2),a("p",[t._v('v-text="name"与'),a("code",[t._v("<div>"+t._s(t.name)+"</div>")]),t._v("效果一样，但是优于"),a("code",[t._v("<div>"+t._s(t.name)+"</div>")]),t._v("\n如果数据是异步加载过来的时候，"),a("code",[t._v("<div>"+t._s(t.name)+"</div>")]),t._v("会显示"+t._s(t.name)+"\nv-text不会\n一般数据加载都很快，所以用的"),a("code",[t._v("<div>"+t._s(t.name)+"</div>")]),t._v("比较多")]),t._v(" "),t._m(3),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("双大括号的方式会将数据解释为纯文本，而非HTML。为了输出真正的HTML，可以用v-html指令。它等同于JS的innerHtml属性。")]),t._v(" "),t._m(4),t._m(5),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("v-if可以实现条件渲染，Vue会根据表达式的值的真假条件来渲染元素。")]),t._v(" "),t._m(6),a("p",[t._v("如果属性值ok为true，则显示。否则，不会渲染这个元素。")]),t._v(" "),t._m(7),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("v-else是搭配v-if使用的，它必须紧跟在v-if或者v-else-if后面，否则不起作用。")]),t._v(" "),t._m(8),t._m(9),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("v-else-if充当v-if的else-if块，可以链式的使用多次。可以更加方便的实现switch语句。")]),t._v(" "),t._m(10),t._m(11),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("多次使用用v-show，一次使用用v-if")]),t._v(" "),t._m(12),a("p",[t._v('v-show=“true”     \t// 相当于display：block\nv-show=“false"  \t// 相当于display：none\n显示与不显示，但是内容是一直都在的')]),t._v(" "),a("p",[t._v('v-if=”true“        显示\nv-if="false"       不显示，相当于被注释掉了\n动态创建与删除，虚拟DOM里面的注释与不注释\nv-if=""   后面只能跟表达式，不能跟语句')]),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("v-for循环外面必须套一个大盒子\n用v-for指令根据遍历数组来进行渲染\n有下面两种遍历形式")]),t._v(" "),t._m(15),t._m(16),t._m(17),t._v(" "),t._m(18),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("绑定事件指令\n简写： @\n事件方法 = methods里面定义好的事件名称")]),t._v(" "),t._m(19),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._m(23),t._v(" "),t._m(24),t._v(" "),a("p",[t._v("Vue 允许为 v-on 在监听键盘事件时添加按键修饰符：")]),t._v(" "),t._m(25),a("p",[t._v("全部的按键别名：")]),t._v(" "),t._m(26),t._m(27),t._m(28),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("v-bind用来动态的绑定一个或者多个特性。没有参数时，可以绑定到一个包含键值对的对象。常用于动态绑定class和style。以及href等。\n简写为一个冒号【  ：】")]),t._v(" "),t._m(29),t._v(" "),t._m(30),a("p",[t._v("渲染结果：\n")]),t._v(" "),t._m(31),t._m(32),t._v(" "),t._m(33),a("p",[t._v("渲染结果：\n")]),t._v(" "),t._m(34),t._m(35),t._v(" "),t._m(36),a("p",[t._v("渲染结果：")]),t._v(" "),t._m(37),a("p",[t._v("还有,src属性绑定")]),t._v(" "),t._m(38),t._m(39),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("双向绑定：绑定的是input的value值和Vue中的data中的数据。")]),t._v(" "),t._m(40),a("p",[t._v("这个例子中直接在浏览器input中输入别的名字，下面的p的内容会直接跟着变。这就是双向数据绑定。")]),t._v(" "),t._m(41),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),a("p",[t._v("v-model    input checkbox的被选中的value值和数据进行绑定\n可以把用户选中的值记录下来，给后台发过去")]),t._v(" "),t._m(44),t._v(" "),a("p",[t._v("被选中的选项的value值与数据进项绑定，虽然数据只有一条，但是统一规范，全部写成数组格式")]),t._v(" "),t._m(45),t._v(" "),a("p",[t._v("绑定选中的选项的value值与数据")]),t._v(" "),t._m(46),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("跳过这个元素和它的子元素的编译过程。可以用来显示原始 Mustache {{}} 标签。跳过大量没有指令的节点会加快编译。")]),t._v(" "),a("p",[t._v("示例：")]),t._v(" "),t._m(47),t._m(48),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("这个指令是用来保持在元素上直到关联实例结束时进行编译。")]),t._v(" "),t._m(49),a("p",[t._v("在页面加载时会闪烁，先显示:")]),t._v(" "),t._m(50),a("p",[t._v("然后才会编译为：")]),t._v(" "),t._m(51),t._m(52),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("v-once关联的实例，只会渲染一次。之后的重新渲染，实例极其所有的子节点将被视为静态内容跳过，这可以用于优化更新性能。")]),t._v(" "),t._m(53),a("p",[t._v("上面的例子中，msg,list即使产生改变，也不会重新渲染。")])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"vue指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue指令","aria-hidden":"true"}},[this._v("#")]),this._v(" Vue指令")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"v-text"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-text","aria-hidden":"true"}},[this._v("#")]),this._v(" v-text")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('\n<div v-text="name"></div>\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"v-html"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-html","aria-hidden":"true"}},[this._v("#")]),this._v(" v-html")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("<div id=\"app\">\n<div v-html=\"chenData\"></div>\n</div>\n<script>\n let app = new Vue({\n    el: '#app',\n      data: {\n          chenData: '<p>这个div的内容将会替换成属性值chenData，直接作为HTML进行渲染。</p>'\n      }\n  });\n\n <\/script>\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"v-if"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-if","aria-hidden":"true"}},[this._v("#")]),this._v(" v-if")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('<a v-if="ok">yes</a>\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"v-else"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-else","aria-hidden":"true"}},[this._v("#")]),this._v(" v-else")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('<a v-if="ok">yes</a>\n<a v-else>No</a>\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"v-else-if"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-else-if","aria-hidden":"true"}},[this._v("#")]),this._v(" v-else-if")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("<div v-if=\"type === 'A'\">\n  A\n</div>\n<div v-else-if=\"type === 'B'\">\n  B\n</div>\n<div v-else-if=\"type === 'C'\">\n  C\n</div>\n<div v-else>\n  Not A/B/C\n</div>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"v-show"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-show","aria-hidden":"true"}},[this._v("#")]),this._v(" v-show")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('h1 v-show="ok">hello world</h1>\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("TIP")]),this._v(" "),e("p",[this._v("注意：v-if有更高的切换开销\nv-show有更高的初始渲染开销。\n因此，如果要非常频繁的切换，则使用v-show较好；如果在运行时条件不太可能改变，则v-if较好")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"v-for"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-for","aria-hidden":"true"}},[this._v("#")]),this._v(" v-for")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('<li v-for="(value，key,index) in data里的对象名"></li>   //使用in，index是一个可选参数，表示当前项的索引\n<li v-for="(item,index) of data里的数组名"></li>   //使用of\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('<div id="app">\n    <li v-for="(item,index) in chenArrs">\n        {{chenArrs.item}}{{chenObj.name}}\n    </li>\n</div>\n<script type="text/javascript">\n    let app = new Vue({\n      el:\'#app\',\n      data:{\n        chenArrs:[1,2,3,4,5],\n        chenObj:{\n            name:"chen",\n            age:"12",\n            hope:"read_book"\n        }\n      }\n    })\n<\/script>\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("TIP")]),this._v(" "),e("p",[this._v('注意：当v-for和v-if同处于一个节点时，v-for的优先级比v-if更高。这意味着v-if将运行在每个v-for循环中\n当v-for列表循环时，加绑定一key值  :key="item.id" ，key="唯一标识" 唯一标识可以是item里面id index等，因为vue组件高度复用增加Key可以标识组件的唯一性，为了更好地区别各个组件 key的作用主要是为了高效的更新虚拟DOM')])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"v-on-事件绑定"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-on-事件绑定","aria-hidden":"true"}},[this._v("#")]),this._v(" v-on(事件绑定)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("<button @click//点击事件 = \"handleClick\" >\n<script>\nlet app = new Vue({\n   el: '#app',\n     methods:{   //这个选项放置的都是 方法\n         handleClick() {\n             console.log('welcome')\n         }\n     },\n     data: {\n         name: 'vlin'\n     }\n });\n\n<\/script>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"事件修饰符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件修饰符","aria-hidden":"true"}},[this._v("#")]),this._v(" 事件修饰符")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ul",[a("li",[a("p",[t._v(".stop  阻止事件继续传播")])]),t._v(" "),a("li",[a("p",[t._v(".prevent 事件不再重载页面")])]),t._v(" "),a("li",[a("p",[t._v(".capture 使用事件捕获模式,即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理")])]),t._v(" "),a("li",[a("p",[t._v(".self 只当在 event.target 是当前元素自身时触发处理函数")])]),t._v(" "),a("li",[a("p",[t._v(".once 事件将只会触发一次")])]),t._v(" "),a("li",[a("p",[t._v(".passive 告诉浏览器你不想阻止事件的默认行为")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('\x3c!-- 阻止单击事件继续传播 --\x3e\n<a v-on:click.stop="doThis"></a>\n\n\x3c!-- 提交事件不再重载页面 --\x3e\n<form v-on:submit.prevent="onSubmit"></form>\n\n\x3c!-- 修饰符可以串联 --\x3e\n<a v-on:click.stop.prevent="doThat"></a>\n\n\x3c!-- 只有修饰符 --\x3e\n<form v-on:submit.prevent></form>\n\n\x3c!-- 添加事件监听器时使用事件捕获模式 --\x3e\n\x3c!-- 即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理 --\x3e\n<div v-on:click.capture="doThis">...</div>\n\n\x3c!-- 只当在 event.target 是当前元素自身时触发处理函数 --\x3e\n\x3c!-- 即事件不是从内部元素触发的 --\x3e\n<div v-on:click.self="doThat">...</div>\n\n\x3c!-- 点击事件将只会触发一次 --\x3e\n<a v-on:click.once="doThis"></a>\n\n\x3c!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --\x3e\n\x3c!-- 而不会等待 `onScroll` 完成  --\x3e\n\x3c!-- 这其中包含 `event.preventDefault()` 的情况 --\x3e\n<div v-on:scroll.passive="onScroll">...</div>\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("TIP")]),this._v(" "),e("p",[this._v("使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用v-on:click.prevent.self会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"按键修饰符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#按键修饰符","aria-hidden":"true"}},[this._v("#")]),this._v(" 按键修饰符")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('\x3c!-- 只有在 keyCode 是 13 时（也就是回车键）调用 vm.submit() --\x3e\n<input v-on:keyup.13="submit">\n\n记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：\n\x3c!-- 只有在 keyCode 是回车键时调用 vm.submit() --\x3e\n<input v-on:keyup.enter="submit">\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('.enter\n.tab\n.delete (捕获 "删除" 和 "退格" 键)\n.esc\n.space\n.up\n.down\n.left\n.right\n.ctrl\n.alt\n.shift\n.meta\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('<p>\x3c!-- Alt + C --\x3e\n<input @keyup.alt.67="clear">\n\x3c!-- Ctrl + Click --\x3e\n<div @click.ctrl="doSomething">Do something</div>\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"v-bind（属性绑定）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-bind（属性绑定）","aria-hidden":"true"}},[this._v("#")]),this._v(" v-bind（属性绑定）")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"对象语法："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象语法：","aria-hidden":"true"}},[this._v("#")]),this._v(" 对象语法：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("//进行类切换的例子\n<div id=\"app\">\n    \x3c!--当data里面定义的isActive等于true时，is-active这个类才会被添加起作用--\x3e\n    \x3c!--当data里面定义的hasError等于true时，text-danger这个类才会被添加起作用--\x3e\n    <div :class=\"{'is-active':isActive, 'text-danger':hasError}\"></div>\n</div>\n<script>\n    var app = new Vue({\n        el: '#app',\n        data: {\n            isActive: true,  \n            hasError: false\n        }\n    })\n<\/script>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('<div class = "is-active"></div>\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"数组语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组语法","aria-hidden":"true"}},[this._v("#")]),this._v(" 数组语法")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("<div id=\"app\">\n    \x3c!--数组语法：errorClass在data对应的类一定会添加--\x3e\n    \x3c!--is-active是对象语法，根据activeClass对应的取值决定是否添加--\x3e\n    <p :class=\"[{'is-active':activeClass},errorClass]\">12345</p>\n</div>\n<script>\n    var app = new Vue({\n        el: '#app',\n        data: {\n            activeClass: false,\n            errorClass: 'text-danger'\n        }\n    })\n<\/script>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('<p class = "text-danger"></p>\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"直接绑定数据对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#直接绑定数据对象","aria-hidden":"true"}},[this._v("#")]),this._v(" 直接绑定数据对象")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("<div id=\"app\">\n    \x3c!--在vue实例的data中定义了classObject对象，这个对象里面是所有类名及其真值--\x3e\n    \x3c!--当里面的类的值是true时会被渲染--\x3e\n    <div :class=\"classObject\">12345</div>\n</div>\n<script>\n    var app = new Vue({\n        el: '#app',\n        data: {\n            classObject:{\n                'is-active': false,\n                'text-danger':true\n            }           \n        }\n    })\n<\/script>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('<div class = "text-danger"></div>\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('<img v-bind:src="imgUrl"/>\n\ndata:{\n    imgUrl : "./asset/good.png"\n}\n\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"v-model（表单事件绑定）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-model（表单事件绑定）","aria-hidden":"true"}},[this._v("#")]),this._v(" v-model（表单事件绑定）")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("v-model会忽略所有表单元素的value、checked、selected特性的初始值。因为它选择Vue实例数据做为具体的值。\n<div id=\"app\">\n    <input v-model=\"somebody\">\n    <p>hello {{somebody}}</p>\n</div>\n<script>\n    var app = new Vue({\n        el: '#app',\n        data: {\n            somebody:'小明'\n        }\n    })\n<\/script>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"v-model的修饰符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-model的修饰符","aria-hidden":"true"}},[this._v("#")]),this._v(" v-model的修饰符")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("v-model.lazy 只有在input输入框发生一个blur时才触发")]),this._v(" "),e("li",[this._v("v-model.trim 将用户输入的前后的空格去掉")]),this._v(" "),e("li",[this._v("v-model.number 将用户输入的字符串转换成number")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"checkbox-多选框"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#checkbox-多选框","aria-hidden":"true"}},[this._v("#")]),this._v(" checkbox   多选框")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"select-下拉框"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#select-下拉框","aria-hidden":"true"}},[this._v("#")]),this._v(" select  下拉框")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"radio-单选框"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#radio-单选框","aria-hidden":"true"}},[this._v("#")]),this._v(" radio  单选框")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"v-pre"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-pre","aria-hidden":"true"}},[this._v("#")]),this._v(" v-pre")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("<span v-pre>{{ 这里的内容不会被编译 }}</span>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"v-cloak"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-cloak","aria-hidden":"true"}},[this._v("#")]),this._v(" v-cloak")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("<div id=\"app\" v-cloak>\n    <div>\n        {{message}}\n    </div>\n</div>\n<script type=\"text/javascript\">\n    new Vue({\n      el:'#app',\n      data:{\n        message:'hello world'\n      }\n    })\n<\/script>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("<div>\n    {{message}}\n</div>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("<div>\n    hello world!\n</div>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"v-once"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-once","aria-hidden":"true"}},[this._v("#")]),this._v(" v-once")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('<span v-once>This will never change:{{msg}}</span>  //单个元素\n<div v-once>//有子元素\n    <h1>comment</h1>\n    <p>{{msg}}</p>\n</div>\n<my-component v-once:comment="msg"></my-component>  //组件\n<ul>\n    <li v-for="i in list">{{i}}</li>\n</ul>\n')])])])}],!1,null,null,null);n.options.__file="vue_first.md";e.default=n.exports}}]);